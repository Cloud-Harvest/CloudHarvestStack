#!/bin/bash

########################################################################################################################
# This script is a wrapper around the docker compose command. It is used to set the default configurations for the
# Harvest stack. The script will copy the default configurations from the defaults/ directory into the app/ directory
# if the files do not already exist. The script will then prompt the user to enter the desired tag for each of the
# Harvest stack objects: Agent, Api, and Cli(ent). The script will then execute the docker compose command with the
# provided arguments.
#
# Although this script will create a CLI container and start it, this script will not attach the terminal to the CLI.
# To attach the terminal to the CLI, use the provided `console` script.
########################################################################################################################

#########################################################
# Set the default configurations
#########################################################

# Make the app directory if it doesn't already exist
mkdir -pv ./app

# Copy the default configurations from the defaults/ directory into app/ if the files do not exists
cp -vr --update ./defaults/* ./app/

# Make sure the ./app/stack.rc file exists
touch ./app/stack.rc

# Source the stack.rc file to get the current values
source ./app/stack.rc

#########################################################
# Get the desired tag for each Harvest service
#########################################################

# Get the desired tags to each stack object: Agent, Api, and Cli(ent)
# Array of services
services=("AGENT" "API" "CLI")

# Loop through each service to get the desired tag
for service in "${services[@]}"; do
  current_value=$(printenv HARVEST_"${service}"_IMAGE_TAG)
  read -r -p "Enter the desired tag for HARVEST_${service}_IMAGE_TAG (current: ${current_value:-latest}, default: latest): " tag
  tag=${tag:-${current_value:-latest}}
  export HARVEST_"${service}"_IMAGE_TAG="$tag"

  # Check if the entry already exists in stack.rc
  if grep -q "HARVEST_${service}_IMAGE_TAG=" ./app/stack.rc; then
    # Update the existing entry
    sed -i "s|^export HARVEST_${service}_IMAGE_TAG=.*|export HARVEST_${service}_IMAGE_TAG=$tag|" ./app/stack.rc
  else
    # Add a new entry
    echo "export HARVEST_${service}_IMAGE_TAG=$tag" >> ./app/stack.rc
  fi

done

#########################################################
# Configure the UID and GID for the current user
#########################################################

# Record the UID and the GID of the current user and export them to the ./app/stack.rc file
gu_ids=("UID" "GID")

for i in "${gu_ids[@]}"; do
  if [ "$i" == "UID" ]; then
    value=$(id -u)
  else
    value=$(id -g)
  fi

  export HARVEST_"${i}"="$value"

  # Check if the entry already exists in stack.rc
  if grep -q "HARVEST_${i}=" ./app/stack.rc; then
    # Update the existing entry
    sed -i "s|^export HARVEST_${i}=.*|export HARVEST_${i}=$value|" ./app/stack.rc
  else
    # Add a new entry
    echo "export HARVEST_${i}=$value" >> ./app/stack.rc
  fi
done

echo "This configuration can be found in ./app/stack.rc"

#########################################################
# Self-signed certificate generation
#########################################################

# Create a directory to store the certificate and key
cert_dir="./app/.certs"
pem_name="harvest-self-signed.pem"

mkdir -pv $cert_dir

# Check if the certificate and key files already exist
if [ ! -f "$cert_dir/$pem_name" ]; then
  # Generate a self-signed certificate and key in a single PEM file
  openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
    -keyout "$cert_dir/$pem_name" \
    -out "$cert_dir/$pem_name" \
    -subj "/CN=cloudharveststack.local"

else
  echo "Certificate and key already exist. Skipping generation."

fi

# Copy the configuration file to the agent and api directories in the app directory
app_components=("agent" "api" "cli")
for component in "${app_components[@]}"; do
  cp -v "$cert_dir"/* "./app/$component/"
done

echo "Certificates generated and copied to app directories."

#########################################################
# Execute the docker compose command
#########################################################

docker compose "$@"