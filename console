#!/bin/bash

# Function to get the latest container name
get_latest_container_name() {
  docker ps --filter "name=cloudharveststack-harvest-cli-" --format "{{.Names}}" | sort | tail -n 1
}

# Source the ./app/stack.rc file if it exists
if [ -f ./app/stack.rc ]; then
  source ./app/stack.rc
fi

# Check for arguments
if [ "$1" == "--list" ]; then
  # List all the running cli containers
  docker ps --filter "name=cloudharveststack-harvest-cli-" --format "table {{.Names}}\t{{.Status}}"

elif [ "$1" == "--new" ]; then
  # Scale up the number of cli instances by one
  current_count=$(docker ps --filter "name=cloudharveststack-harvest-cli-" --format "{{.Names}}" | wc -l)
  new_count=$((current_count + 1))
  docker compose up --scale harvest-cli=$new_count -d

  # Get the latest container name
  latest_container=$(get_latest_container_name)

  # Display previous output of container
  docker logs "$latest_container"

  # Attach to the latest container
  docker attach "$latest_container"

elif [ "$1" == "--prune" ]; then
  # Scale down the number of cli instances to 0
  docker compose up --scale harvest-cli=0 -d
  echo "All 'cloudharveststack-harvest-cli-' containers have been stopped."

elif [ $1 == "--use" ]; then
    # Check if the user has provided a container name
  if [ -z "$2" ]; then
    echo "Please provide a container name to attach to."
    exit 1
  fi

 container_name="cloudharveststack-harvest-cli-$2"

  # Check if the specified container is running
  if [ -z "$(docker ps --filter "name=$container_name" --format "{{.Names}}")" ]; then
    echo "The specified container \`$container_name\` is not running."
    exit 1
  fi

  # Attach to the specified container
  docker logs "$container_name"
  docker attach "$container_name"

else
  # Check if any cli containers are running
  if [ "$(docker ps --filter "name=cloudharveststack-harvest-cli-" --format "{{.Names}}" | wc -l)" -eq 0 ]; then
    # Scale up the number of cli instances by one
    docker compose up --scale harvest-cli=1 -d

    # Get the latest container name
    latest_container=$(get_latest_container_name)

    # Attach to the latest container
    docker attach "$latest_container"
  else
    # Get the latest container name
    latest_container=$(get_latest_container_name)

    # Attach to the latest container
    docker attach "$latest_container"
  fi
fi