#!/bin/bash

# Function to get the latest container name
get_latest_container_name() {
  docker ps --filter "name=cloudharveststack-harvest-cli-" --format "{{.Names}}" | sort | tail -n 1
}

# Function to display help message
display_help() {
  echo "Usage: console [OPTION]"
  echo "Manage CLI containers for the Cloud Harvest stack."
  echo
  echo "Options:"
  echo "  --list       Lists all CLI containers"
  echo "  --new        Creates a new CLI container"
  echo "  --prune      Removes all CLI containers"
  echo "  --use NAME   Attach to a specific CLI container by name"
  echo "  --help       Display this help message"
}

# Source the ./app/stack.rc file if it exists
if [ -f ./app/stack.rc ]; then
  source ./app/stack.rc
fi

# Check for arguments
case "$1" in
  --list)
    # List all the running cli containers
    docker ps --filter "name=cloudharveststack-harvest-cli-" --format "table {{.Names}}\t{{.Status}}"
    ;;
  --new)
    # Scale up the number of cli instances by one
    current_count=$(docker ps --filter "name=cloudharveststack-harvest-cli-" --format "{{.Names}}" | wc -l)
    new_count=$((current_count + 1))
    docker compose --file docker-compose.cli.yaml up --scale harvest-cli=$new_count -d

    # Get the latest container name
    latest_container=$(get_latest_container_name)

    # Display previous output of container
    docker logs "$latest_container"

    # Attach to the latest container
    docker attach "$latest_container"
    ;;
  --prune)
    # Scale down the number of cli instances to 0
    docker compose --file docker-compose.cli.yaml up --scale harvest-cli=0 -d
    echo "All 'cloudharveststack-harvest-cli-' containers have been stopped."
    ;;
  --use)
    # Check if the user has provided a container name
    if [ -z "$2" ]; then
      echo "Please provide a container name to attach to."
      exit 1
    fi

    container_name="cloudharveststack-harvest-cli-$2"

    # Check if the specified container is running
    if [ -z "$(docker ps --filter "name=$container_name" --format "{{.Names}}")" ]; then
      echo "The specified container \`$container_name\` is not running."
      exit 1
    fi

    # Attach to the specified container
    docker logs "$container_name"
    docker attach "$container_name"
    ;;
  --help)
    display_help
    ;;
  *)
    # Check if any cli containers are running
    if [ "$(docker ps --filter "name=cloudharveststack-harvest-cli-" --format "{{.Names}}" | wc -l)" -eq 0 ]; then
      # Scale up the number of cli instances by one
      docker compose --file docker-compose.cli.yaml up --scale harvest-cli=1 -d

      # Get the latest container name
      latest_container=$(get_latest_container_name)

      # Attach to the latest container
      docker attach "$latest_container"
    else
      # Get the latest container name
      latest_container=$(get_latest_container_name)

      # Attach to the latest container
      docker attach "$latest_container"
    fi
    ;;
esac